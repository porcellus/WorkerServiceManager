{"version":3,"file":"bundle.module.js","sources":["../src/deferredPromise.ts","../src/portHandler.ts","../src/serviceMap.ts","../src/multiRemoteService.ts","../src/remoteService.ts","../src/workerServiceManager.ts"],"sourcesContent":["export class DeferredPromise<T> {\r\n  public promise: Promise<T>;\r\n  public resolve: (value?: PromiseLike<T> | T) => void;\r\n  public reject: (reason?: any) => void;\r\n\r\n  constructor() {\r\n    this.promise = new Promise((res, rej) => {\r\n      this.resolve = res;\r\n      this.reject = rej;\r\n    });\r\n  }\r\n}\r\n","import { DeferredPromise } from \"./deferredPromise\";\r\n\r\nexport interface IMessagePort {\r\n  onmessage: (event: MessageEvent) => void | Promise<void>;\r\n  terminate: () => void;\r\n\r\n  postMessage(data: any[], transfers?: any[]);\r\n}\r\n\r\nenum PortCommands {\r\n  call,\r\n  fire,\r\n  resolve,\r\n  reject,\r\n}\r\n\r\nexport class PortHandler {\r\n  private callHandler: (service, method, args) => Promise<any>;\r\n  private deferreds: Map<number, DeferredPromise<any>>;\r\n  private nextPid: number;\r\n  private port: IMessagePort;\r\n\r\n  constructor(private portPromise: Promise<IMessagePort> | IMessagePort) {\r\n    this.nextPid = 0;\r\n    this.deferreds = new Map<number, DeferredPromise<any>>();\r\n    this.callHandler = null;\r\n    if (!(this.portPromise instanceof Promise)) {\r\n      this.port = this.portPromise;\r\n      this.port.onmessage = this.handleMessage.bind(this);\r\n    } else this.portPromise.then((port) => {\r\n          this.port = port;\r\n          this.port.onmessage = this.handleMessage.bind(this);\r\n      });\r\n  }\r\n\r\n  public async terminate() {\r\n      const port = this.port ? this.port : await this.portPromise;\r\n\r\n      port.onmessage = undefined;\r\n      port.terminate();\r\n\r\n      this.portPromise = undefined;\r\n      this.port = undefined;\r\n  }\r\n\r\n  public async call(service, method, args): Promise<any> {\r\n    if (!this.port && !this.portPromise)\r\n      throw new Error(\"PortTerminated\");\r\n    const port = this.port ? this.port : await this.portPromise;\r\n    const deferred = new DeferredPromise<any>();\r\n    const pid = this.nextPid++;\r\n    this.deferreds.set(pid, deferred);\r\n    port.postMessage([PortCommands.call, pid, service, method, args]);\r\n    return deferred.promise;\r\n  }\r\n\r\n  public setCallHandler(handler) {\r\n    if (this.callHandler !== null) throw new Error(\"Call handler already set\");\r\n    this.callHandler = handler;\r\n  }\r\n\r\n  public fire(service, method, args): void {\r\n    if (!this.port)\r\n      throw new Error(\"PortTerminated\");\r\n\r\n    this.port.postMessage([PortCommands.fire, service, method, args]);\r\n  }\r\n\r\n  private async handleMessage(ev) {\r\n    switch (ev.data[0]) { // cmd\r\n      case PortCommands.fire:\r\n        try {\r\n          // We intentionally ignore the result (and even the errors) of the call. This is rarely a good idea,\r\n          // but it is sometimes useful.\r\n          //noinspection JSIgnoredPromiseFromCall\r\n          this.callHandler(ev.data[2], ev.data[3], ev.data[4]);\r\n        } catch (ex) {\r\n          // We ignore errors during calls because we have no way to handle them.\r\n          // TODO: add an settable error handler/logger\r\n          // console.error(ex);\r\n        }\r\n        break;\r\n      case PortCommands.call:\r\n        try {\r\n          const res = await this.callHandler(\r\n            ev.data[2],\r\n            ev.data[3],\r\n            ev.data[4],\r\n          );\r\n          this.port.postMessage([PortCommands.resolve, ev.data[1], res]);\r\n        } catch (ex) {\r\n          this.port.postMessage([PortCommands.reject, ev.data[1], ex]);\r\n        }\r\n        break;\r\n      case PortCommands.resolve:\r\n        this.deferreds.get(ev.data[1]).resolve(ev.data[2]);\r\n        this.deferreds.delete(ev.data[1]);\r\n        break;\r\n      case PortCommands.reject:\r\n        this.deferreds.get(ev.data[1]).reject(ev.data[2]);\r\n        this.deferreds.delete(ev.data[1]);\r\n        break;\r\n    }\r\n  }\r\n}\r\n","import { PortHandler } from \"./portHandler\";\r\n\r\nexport class ServiceMap {\r\n  public services: Map<string, any>;\r\n  public ports: PortHandler[];\r\n\r\n  constructor() {\r\n    this.services = new Map<string, any>();\r\n    this.ports = [];\r\n  }\r\n\r\n  public addPort(port: any) {\r\n    const handler = new PortHandler(port);\r\n    handler.setCallHandler(this.handleCall.bind(this));\r\n    this.ports.push(handler);\r\n    return handler;\r\n  }\r\n\r\n  public terminatePort(handler: PortHandler): void {\r\n      this.ports.splice(this.ports.indexOf(handler), 1);\r\n      handler.terminate();\r\n  }\r\n\r\n  public addServiceObject(name, obj: any) {\r\n    return this.services.set(name, obj);\r\n  }\r\n\r\n  public async handleCall(service: string, method: string, args: any[]) {\r\n    const serviceObj = this.services.get(service);\r\n    if (serviceObj !== undefined) return await serviceObj[method](...args);\r\n\r\n    // We don't know about this service at all...\r\n    throw new Error(\"Service not found\");\r\n  }\r\n}\r\n","import {DeferredPromise} from \"./deferredPromise\";\r\nimport {IMessagePort, PortHandler} from \"./portHandler\";\r\nimport {RemoteService} from \"./remoteService\";\r\nimport {ServiceMap} from \"./serviceMap\";\r\n\r\nexport class MultiRemoteService<T extends RemoteService> {\r\n    private busyPorts: T[];\r\n    private freePorts: PortHandler[];\r\n\r\n    private queue: Array<DeferredPromise<PortHandler>>;\r\n\r\n    constructor(private serviceMap: ServiceMap,\r\n                private portFactory: () => Promise<IMessagePort>, private proxyType: new (ph: PortHandler) => T,\r\n                private maxPorts: number, private minPorts: number = 0) {\r\n        this.busyPorts = [];\r\n        this.freePorts = [];\r\n        this.queue = [];\r\n    }\r\n\r\n    public spinUp() {\r\n        while (this.freePorts.length < this.minPorts)\r\n            this.releasePort(this.getNewPort());\r\n    }\r\n\r\n    public async getRemote(): Promise<T> {\r\n      let portHandler: PortHandler;\r\n      if (this.busyPorts.length >= this.maxPorts) {\r\n          const prom = new DeferredPromise<PortHandler>();\r\n          this.queue.push(prom);\r\n          portHandler = await prom.promise;\r\n      } else if (this.freePorts.length > 0)\r\n          portHandler = this.freePorts.shift();\r\n      else\r\n          portHandler = this.getNewPort();\r\n\r\n      const remote = new this.proxyType(portHandler);\r\n      this.busyPorts.push(remote);\r\n\r\n      return remote;\r\n    }\r\n\r\n    public releaseRemote(remote: T): void {\r\n        const portHandler = remote.detach();\r\n\r\n        this.busyPorts.splice(this.busyPorts.indexOf(remote), 1);\r\n\r\n        this.releasePort(portHandler);\r\n    }\r\n\r\n    private releasePort(portHandler: PortHandler): void {\r\n        if (this.queue.length > 0) {\r\n            const deferred = this.queue.shift();\r\n            deferred.resolve(portHandler);\r\n        } else if (this.freePorts.length < this.minPorts)\r\n            this.freePorts.push(portHandler);\r\n        else // noinspection JSIgnoredPromiseFromCall\r\n            portHandler.terminate();\r\n    }\r\n\r\n    private getNewPort() {\r\n        const ph = new PortHandler(this.portFactory());\r\n        ph.setCallHandler(this.serviceMap.handleCall.bind(this.serviceMap));\r\n        return ph;\r\n    }\r\n}\r\n","import { PortHandler } from \"./portHandler\";\r\n\r\nexport class RemoteService {\r\n  public name: string;\r\n\r\n  constructor(private port: PortHandler) {}\r\n\r\n  public async call(method, args = []) {\r\n    if (this.port === undefined)\r\n      throw new Error(\"RemoteDetached\");\r\n\r\n    return await this.port.call(this.name, method, args);\r\n  }\r\n\r\n  public detach(): PortHandler {\r\n      const port = this.port;\r\n      this.port = undefined;\r\n      return port;\r\n  }\r\n}\r\n","import { PortHandler } from \"./portHandler\";\r\nimport { RemoteService } from \"./remoteService\";\r\nimport { ServiceMap } from \"./serviceMap\";\r\n\r\nexport class WorkerServiceManager extends ServiceMap {\r\n  constructor(localServiceMap, remoteServiceMap) {\r\n    super();\r\n\r\n    localServiceMap.forEach((obj, name) => this.addServiceObject(name, obj));\r\n\r\n    remoteServiceMap.forEach((serviceProxyTypes, port) => {\r\n      const portHandler = this.addPort(port);\r\n\r\n      serviceProxyTypes.forEach((serviceProxyInfo) => {\r\n        const proxy = new serviceProxyInfo[1](portHandler);\r\n        proxy.name = serviceProxyInfo[0];\r\n        this.addServiceObject(serviceProxyInfo[0], proxy);\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport { MultiRemoteService } from \"./multiRemoteService\";\r\nexport { RemoteService } from \"./remoteService\";\r\nexport { PortHandler } from \"./portHandler\";\r\n"],"names":[],"mappings":"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"}