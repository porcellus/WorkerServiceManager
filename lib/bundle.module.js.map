{"version":3,"file":"bundle.module.js","sources":["../src/messageTransformers/defaultMessageTransformer.ts","../src/deferredPromise.ts","../src/port/BasicPortHandler.ts","../src/port/AsyncPortHandler.ts","../src/port/LazyPortHandler.ts","../src/serviceMap.ts","../src/multiRemoteService.ts","../src/remoteService.ts","../src/workerServiceManager.ts"],"sourcesContent":["import {MessageTransformer, Transferable} from \"./messageTransformer\";\n\nfunction transformError(err) {\n    return {\n        name: err.name,\n        message: err.message,\n        stack: err.stack,\n    }\n}\n\nexport class DefaultMessageTransformer implements MessageTransformer {\n  private transform(message: any, visited: Map<any, boolean>): [any, Transferable[], boolean] {\n      if (message && typeof message === 'object') {\n          visited.set(message, false);\n          switch (Object.prototype.toString.call(message)) {\n              case '[object ArrayBuffer]':\n              case '[object Uint8Array]':\n              case '[object Int8Array]':\n              case '[object Uint16Array]':\n              case '[object Int16Array]':\n              case '[object Uint32Array]':\n              case '[object Int32Array]':\n              case '[object Float32Array]':\n              case '[object Float64Array]':\n                  if (message.buffer.byteLength === message.byteLength) {\n                      visited.set(message, false);\n                      return [message, [message.buffer], false];\n                  } else {\n                      const copy = new message.constructor(message);\n                      visited.set(message, true);\n                      return [copy, [copy.buffer], true];\n                  }\n              case '[object Array]':\n                  const res = message.map(e => this.transform(e, visited));\n                  const copied = res.reduce((a, c) => a || c, false);\n                  visited.set(message, copied);\n                  return [copied ? res.map(a => a[0]) : message, res.reduce((a, c) => a.concat(c[1]), []), copied];\n              case '[object Promise]':\n              case '[object XMLHttpRequest]':\n              case '[object Event]':\n                  throw new Error('CommunicationErrorNonMessageableValue');\n              case '[object DOMError]':\n              case '[object DOMException]':\n                  visited.set(message, true);\n                  return [transformError(message), [], true];\n              default:\n                  if (message instanceof Error) {\n                      visited.set(message, true);\n                      return [transformError(message), [], true];\n                  }\n                  const resObj = {};\n                  let transferrables = [];\n                  let copiedObj = false;\n                  for (const key of Object.keys(message)) {\n                      if (!key.startsWith('_')) {\n                          const cRes = this.transform(message[key], visited);\n                          transferrables = transferrables.concat(cRes[2]);\n                          if (cRes[3]) {\n                              copiedObj = true;\n                              resObj[key] = copiedObj;\n                          } else {\n                              resObj[key] = message[key];\n                          }\n                      }\n                  }\n                  visited.set(message, copiedObj);\n                  return [copiedObj ? resObj : message, transferrables, copiedObj];\n          }\n      }\n      return [message, [], false];\n  }\n\n  transformMessage(message: any): [any, Transferable[]] {\n    return this.transform(message, new Map<any, boolean>()).slice(0,2) as [any, Transferable[]];\n  }\n}","export class DeferredPromise<T> {\n  public promise: Promise<T>;\n  public resolve: (value?: PromiseLike<T> | T) => void;\n  public reject: (reason?: any) => void;\n\n  constructor() {\n    this.promise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n}\n","import {DeferredPromise} from \"../deferredPromise\";\r\nimport {MessageTransformer, Transferable} from \"../messageTransformers/messageTransformer\";\r\nimport {IMessagePort, IPortHandler} from \"./IPortHandler\";\r\n\r\nenum PortCommands {\r\n  call,\r\n  fire,\r\n  resolve,\r\n  reject,\r\n}\r\n\r\nexport class BasicPortHandler implements IPortHandler {\r\n  private callHandler: (service, method, args) => Promise<any>;\r\n  private deferreds: Map<number, DeferredPromise<any>>;\r\n  private nextPid: number;\r\n\r\n  constructor(protected port: IMessagePort|null, protected messageTransformer: MessageTransformer) {\r\n    this.nextPid = 0;\r\n    this.deferreds = new Map<number, DeferredPromise<any>>();\r\n    this.callHandler = null;\r\n\r\n    if (this.port)\r\n      this.port.onmessage = this.handleMessage.bind(this);\r\n  }\r\n\r\n  public async terminate(): Promise<void> {\r\n    const port = this.port;\r\n\r\n    port.onmessage = undefined;\r\n    port.terminate();\r\n\r\n    this.port = undefined;\r\n  }\r\n\r\n  public async call(service, method, args): Promise<any> {\r\n    const deferred = new DeferredPromise<any>();\r\n    const pid = this.nextPid++;\r\n    this.deferreds.set(pid, deferred);\r\n    const msg = this.messageTransformer.transformMessage(args);\r\n    try {\r\n      await this.postMessage([PortCommands.call, pid, service, method, msg[0]], msg[1]);\r\n    } catch (ex) {\r\n      deferred.reject(ex);\r\n    }\r\n    return deferred.promise;\r\n  }\r\n\r\n  public setCallHandler(handler): void {\r\n    if (this.callHandler !== null) throw new Error(\"Call handler already set\");\r\n    this.callHandler = handler;\r\n  }\r\n\r\n  public fire(service, method, args): Promise<void> {\r\n    const msg = this.messageTransformer.transformMessage(args);\r\n    return this.postMessage([PortCommands.fire, service, method, msg[0]], msg[1]);\r\n  }\r\n\r\n  protected async postMessage(msg: any, transferables: Transferable[]): Promise<void> {\r\n    if (!this.port)\r\n      throw new Error(\"PortTerminated\");\r\n\r\n    this.port.postMessage(msg, transferables);\r\n  }\r\n\r\n  protected async handleMessage(ev: any): Promise<void> {\r\n    switch (ev.data[0]) { // cmd\r\n      case PortCommands.fire:\r\n        try {\r\n          // We intentionally ignore the result (and even the errors) of the call. This is rarely a good idea,\r\n          // but it is sometimes useful.\r\n          //noinspection JSIgnoredPromiseFromCall\r\n          this.callHandler(ev.data[2], ev.data[3], ev.data[4]);\r\n        } catch (ex) {\r\n          // We ignore errors during calls because we have no way to handle them.\r\n          // TODO: add an settable error handler/logger\r\n          // console.error(ex);\r\n        }\r\n        break;\r\n      case PortCommands.call:\r\n        try {\r\n          const res = await this.callHandler(\r\n            ev.data[2],\r\n            ev.data[3],\r\n            ev.data[4],\r\n          );\r\n          const msg = this.messageTransformer.transformMessage(res);\r\n          await this.postMessage([PortCommands.resolve, ev.data[1], msg[0]], msg[1]);\r\n        } catch (ex) {\r\n          const msg = this.messageTransformer.transformMessage(ex);\r\n          await this.postMessage([PortCommands.reject, ev.data[1], msg[0]], msg[1]);\r\n        }\r\n        break;\r\n      case PortCommands.resolve:\r\n        this.deferreds.get(ev.data[1]).resolve(ev.data[2]);\r\n        this.deferreds.delete(ev.data[1]);\r\n        break;\r\n      case PortCommands.reject:\r\n        this.deferreds.get(ev.data[1]).reject(ev.data[2]);\r\n        this.deferreds.delete(ev.data[1]);\r\n        break;\r\n    }\r\n  }\r\n}\r\n","import {MessageTransformer, Transferable} from \"../messageTransformers/messageTransformer\";\r\nimport {BasicPortHandler} from \"./BasicPortHandler\";\r\nimport {IMessagePort} from \"./IPortHandler\";\r\n\r\nexport class AsyncPortHandler extends BasicPortHandler {\r\n  constructor(protected portPromise: Promise<IMessagePort>, messageTransformer: MessageTransformer) {\r\n    super(undefined, messageTransformer);\r\n  }\r\n\r\n  public async terminate(): Promise<void> {\r\n    await this.ensurePort();\r\n    this.portPromise = undefined;\r\n    return super.terminate();\r\n  }\r\n\r\n  protected async postMessage(msg: any, transferables: Transferable[]): Promise<void> {\r\n    await this.ensurePort();\r\n    return super.postMessage(msg, transferables);\r\n  }\r\n\r\n  protected async ensurePort(): Promise<void> {\r\n    if (!this.port && this.portPromise) {\r\n      this.port = await this.portPromise;\r\n      this.port.onmessage = this.handleMessage.bind(this);\r\n    }\r\n  }\r\n}\r\n","import {MessageTransformer, Transferable} from \"../messageTransformers/messageTransformer\";\r\nimport {AsyncPortHandler} from \"./AsyncPortHandler\";\r\nimport {IMessagePort} from \"./IPortHandler\";\r\n\r\nexport class LazyPortHandler extends AsyncPortHandler {\r\n  constructor(private portFactory: () => Promise<IMessagePort>, messageTransformer: MessageTransformer) {\r\n    super(undefined, messageTransformer);\r\n  }\r\n\r\n  public async terminate(): Promise<void> {\r\n    await this.ensurePort();\r\n    this.portFactory = undefined;\r\n    return super.terminate();\r\n  }\r\n\r\n  protected async postMessage(msg: any, transferables: Transferable[]): Promise<void> {\r\n    await this.ensurePort();\r\n    return super.postMessage(msg, transferables);\r\n  }\r\n\r\n  protected async ensurePort(): Promise<void> {\r\n    if (!this.port && this.portFactory)\r\n      this.portPromise = this.portFactory();\r\n\r\n    return super.ensurePort();\r\n  }\r\n}\r\n","import {DefaultMessageTransformer} from \"./messageTransformers/defaultMessageTransformer\";\nimport {MessageTransformer} from \"./messageTransformers/messageTransformer\";\nimport {AsyncPortHandler} from \"./port/AsyncPortHandler\";\nimport {BasicPortHandler} from \"./port/BasicPortHandler\";\nimport {IMessagePort, IPortHandler} from \"./port/IPortHandler\";\nimport {LazyPortHandler} from \"./port/LazyPortHandler\";\n\nexport class ServiceMap {\n  public services: Map<string, any>;\n  public ports: IPortHandler[];\n\n  constructor(private messageTransformer: MessageTransformer = new DefaultMessageTransformer()) {\n    this.services = new Map<string, any>();\n    this.ports = [];\n  }\n\n  public addPort(port: IMessagePort | Promise<IMessagePort> | (() => Promise<IMessagePort>)) {\n    let handler;\n    if (typeof port === \"function\")\n      handler = new LazyPortHandler(port, this.messageTransformer);\n    else if (port instanceof Promise)\n      handler = new AsyncPortHandler(port, this.messageTransformer);\n    else\n      handler = new BasicPortHandler(port, this.messageTransformer);\n\n    handler.setCallHandler(this.handleCall.bind(this));\n    this.ports.push(handler);\n    return handler;\n  }\n\n  public terminatePort(handler: IPortHandler): void {\n    this.ports.splice(this.ports.indexOf(handler), 1);\n    // noinspection JSIgnoredPromiseFromCall\n    handler.terminate();\n  }\n\n  public addServiceObject(name, obj: any) {\n    return this.services.set(name, obj);\n  }\n\n  public async handleCall(service: string, method: string, args: any[]) {\n    const serviceObj = this.services.get(service);\n    if (serviceObj !== undefined) return await serviceObj[method](...args);\n\n    // We don't know about this service at all...\n    throw new Error(\"Service not found\");\n  }\n}\n","import {DeferredPromise} from \"./deferredPromise\";\nimport {DefaultMessageTransformer} from \"./messageTransformers/defaultMessageTransformer\";\nimport {MessageTransformer} from \"./messageTransformers/messageTransformer\";\nimport {AsyncPortHandler} from \"./port/AsyncPortHandler\";\nimport {IMessagePort, IPortHandler} from \"./port/IPortHandler\";\nimport {RemoteService} from \"./remoteService\";\nimport {ServiceMap} from \"./serviceMap\";\n\nexport class MultiRemoteService<T extends RemoteService> {\n    private busyPorts: T[];\n    private freePorts: IPortHandler[];\n\n    private queue: Array<DeferredPromise<IPortHandler>>;\n\n    constructor(private serviceMap: ServiceMap,\n                private portFactory: () => Promise<IMessagePort>, private proxyType: new (ph: IPortHandler) => T,\n                private maxPorts: number, private minPorts: number = 0,\n                private messageTransformer: MessageTransformer = new DefaultMessageTransformer(),\n                ) {\n        this.busyPorts = [];\n        this.freePorts = [];\n        this.queue = [];\n    }\n\n    public spinUp() {\n        while (this.freePorts.length < this.minPorts)\n            this.releasePort(this.getNewPort());\n    }\n\n    public async getRemote(): Promise<T> {\n      let portHandler: IPortHandler;\n      if (this.busyPorts.length >= this.maxPorts) {\n          const prom = new DeferredPromise<IPortHandler>();\n          this.queue.push(prom);\n          portHandler = await prom.promise;\n      } else if (this.freePorts.length > 0)\n          portHandler = this.freePorts.shift();\n      else\n          portHandler = this.getNewPort();\n\n      const remote = new this.proxyType(portHandler);\n      this.busyPorts.push(remote);\n\n      return remote;\n    }\n\n    public releaseRemote(remote: T): void {\n        const portHandler = remote.detach();\n\n        this.busyPorts.splice(this.busyPorts.indexOf(remote), 1);\n\n        this.releasePort(portHandler);\n    }\n\n    private releasePort(portHandler: IPortHandler): void {\n        if (this.queue.length > 0) {\n            const deferred = this.queue.shift();\n            deferred.resolve(portHandler);\n        } else if (this.freePorts.length < this.minPorts)\n            this.freePorts.push(portHandler);\n        else // noinspection JSIgnoredPromiseFromCall\n            portHandler.terminate();\n    }\n\n    private getNewPort() {\n        const ph = new AsyncPortHandler(this.portFactory(), this.messageTransformer);\n        ph.setCallHandler(this.serviceMap.handleCall.bind(this.serviceMap));\n        return ph;\n    }\n}\n","import { IPortHandler } from \"./port/IPortHandler\";\n\nexport class RemoteService<PortType extends IPortHandler = IPortHandler> {\n    public name: string;\n\n    constructor(private port: PortType) {}\n\n    public async call(method, args = []) {\n        if (this.port === undefined)\n            throw new Error(\"RemoteDetached\");\n\n        return await this.port.call(this.name, method, args);\n    }\n\n    public detach(): PortType {\n        const port = this.port;\n        this.port = undefined;\n        return port;\n    }\n}\n","import {DefaultMessageTransformer} from \"./messageTransformers/defaultMessageTransformer\";\nimport {MessageTransformer} from \"./messageTransformers/messageTransformer\";\nimport { RemoteService } from \"./remoteService\";\nimport { ServiceMap } from \"./serviceMap\";\n\nexport class WorkerServiceManager extends ServiceMap {\n  constructor(localServiceMap, remoteServiceMap,\n              messageTransformer: MessageTransformer = new DefaultMessageTransformer()) {\n    super(messageTransformer);\n\n    localServiceMap.forEach((obj, name) => this.addServiceObject(name, obj));\n\n    remoteServiceMap.forEach((serviceProxyTypes, port) => {\n      const portHandler = this.addPort(port);\n\n      serviceProxyTypes.forEach((serviceProxyInfo) => {\n        const proxy = new serviceProxyInfo[1](portHandler);\n        proxy.name = serviceProxyInfo[0];\n        this.addServiceObject(serviceProxyInfo[0], proxy);\n      });\n    });\n  }\n}\n\nexport { MultiRemoteService } from \"./multiRemoteService\";\nexport { RemoteService } from \"./remoteService\";\nexport { BasicPortHandler } from \"./port/BasicPortHandler\";\n"],"names":[],"mappings":"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"}